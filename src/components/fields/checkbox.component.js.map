{"version":3,"file":"checkbox.component.js","sourceRoot":"","sources":["checkbox.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAGpD,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAkDpE,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,qBAAqB;IAI1D,YAA+B,QAAkB;QAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;QAAtC,aAAQ,GAAR,QAAQ,CAAU;IAAqB,CAAC;IAEvE,IAAI,OAAO;QACT,OAAQ,IAAI,CAAC,KAAK,CAAC,SAAmC,CAAC,QAA+B,CAAC;IACzF,CAAC;CACF,CAAA;AATY,iBAAiB;IA/C7B,SAAS,CAAC;QACT,QAAQ,EAAE,kBAAkB;QAC5B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CT;QACD,UAAU,EAAE,KAAK;KAClB,CAAC;qCAKyC,QAAQ;GAJtC,iBAAiB,CAS7B","sourcesContent":["import { Component, Injector } from '@angular/core';\r\n\r\nimport { CheckboxComponentType, CheckboxControlType, FieldType } from '../../core/types';\r\nimport { DynamicFieldComponent } from '../../core/dynamic-field.component';\r\n\r\n\r\n@Component({\r\n  selector: 'dynamic-checkbox',\r\n  template: `\r\n    <ng-container [formGroup]=\"frm\" *ngIf=\"host.hasPermission(field.component.permission)\">\r\n      <ion-item\r\n        *ngIf=\"visible(field.component.visible)\"\r\n        [disabled]=\"disabled(field.component.disabled)\"\r\n        [ngClass]=\"evalExpr(field.component.ngClass)\"\r\n        [class]=\"field.component.class\"\r\n        [ngStyle]=\"evalExpr(field.component.ngStyle)\"\r\n        [style]=\"field.component.style\"\r\n        (click)=\"evalEvent(field.component.click, $event)\"\r\n      >\r\n        <ion-checkbox [formControlName]=\"field.name\"\r\n          [ngClass]=\"evalExpr(control?.ngClass)\"\r\n          [class]=\"control?.class\"\r\n          [ngStyle]=\"evalExpr(control?.ngStyle)\"\r\n          [style]=\"control?.style\"\r\n          [checked]=\"evalOrExpr(control?.checked)\"\r\n          [color]=\"evalOrExpr(control?.color)\"\r\n          [indeterminate]=\"evalOrExpr(control?.indeterminate)\"\r\n          [mode]=\"control?.mode\"\r\n          [name]=\"control?.name\"\r\n          [slot]=\"control?.slot || 'start'\"\r\n          (ionBlur)=\"evalEvent(control?.ionBlur, $event)\"\r\n          (ionFocus)=\"evalEvent(control?.ionFocus, $event)\"\r\n          (ionChange)=\"evalEvent(control?.ionChange, $event)\"\r\n        ></ion-checkbox>\r\n        <ng-container *ngIf=\"field.component.label\">\r\n          <ion-label\r\n            [ngClass]=\"evalExpr(label?.ngClass)\"\r\n            [class]=\"label?.class\"\r\n            [ngStyle]=\"evalExpr(label?.ngStyle)\"\r\n            [style]=\"label?.style\"\r\n            [color]=\"evalOrExpr(label?.color)\"\r\n            [position]=\"label?.position\"\r\n            [mode]=\"icon?.mode\"\r\n          >{{labelText}}</ion-label>\r\n        </ng-container>\r\n      </ion-item>\r\n      <ng-container *ngFor=\"let err of field.component.errors\">\r\n        <p *ngIf=\"hasError(err)\" [class]=\"err.class || 'error'\">{{evalOrExprAndTr(err.text)}}</p>\r\n      </ng-container>\r\n    </ng-container>\r\n  `,\r\n  standalone: false,\r\n})\r\nexport class CheckboxComponent extends DynamicFieldComponent {\r\n\r\n  declare field: FieldType;\r\n\r\n  constructor(protected override injector: Injector) { super(injector); }\r\n\r\n  get control(): CheckboxControlType {\r\n    return (this.field.component as CheckboxComponentType).checkbox as CheckboxControlType;\r\n  }\r\n}\r\n"]}