{"version":3,"file":"button.component.js","sourceRoot":"","sources":["button.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAGvE,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAmDpE,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,qBAAqB;IAIxD,YAA+B,QAAkB;QAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;QAAtC,aAAQ,GAAR,QAAQ,CAAU;IAAqB,CAAC;IAEvE,IAAI,OAAO;QACT,OAAQ,IAAI,CAAC,KAAK,CAAC,SAAiC,CAAC,MAA2B,CAAC;IACnF,CAAC;CACF,CAAA;AATY,eAAe;IAhD3B,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CT;QACD,UAAU,EAAE,KAAK;KAClB,CAAC;qCAKyC,QAAQ;GAJtC,eAAe,CAS3B","sourcesContent":["import { Component, Injector, ViewEncapsulation } from '@angular/core';\r\n\r\nimport { ButtonComponentType, ButtonControlType, FieldType } from '../../core/types';\r\nimport { DynamicFieldComponent } from '../../core/dynamic-field.component';\r\n\r\n\r\n@Component({\r\n  selector: 'dynamic-button',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <ng-container [formGroup]=\"frm\" *ngIf=\"host.hasPermission(field.component.permission)\">\r\n      <ion-button\r\n        *ngIf=\"visible(field.component.visible)\"\r\n        [disabled]=\"disabled(field.component.disabled)\"\r\n        [ngClass]=\"evalExpr(field.component.ngClass || control?.ngClass)\"\r\n        [class]=\"field.component.class || control?.class\"\r\n        [ngStyle]=\"evalExpr(field.component.ngStyle || control?.ngStyle)\"\r\n        [style]=\"field.component.style || control?.style\"\r\n        [buttonType]=\"control?.buttonType || 'button'\"\r\n        [color]=\"evalOrExpr(control?.color)\"\r\n        [download]=\"control?.download\"\r\n        [expand]=\"control?.expand\"\r\n        [fill]=\"control?.fill\"\r\n        [href]=\"control?.href\"\r\n        [mode]=\"control?.mode\"\r\n        [rel]=\"control?.rel\"\r\n        [routerDirection]=\"control?.routerDirection || 'forward'\"\r\n        [shape]=\"control?.shape\"\r\n        [size]=\"control?.size\"\r\n        [strong]=\"control?.strong || false\"\r\n        [target]=\"control?.target\"\r\n        [type]=\"control?.buttonType || 'button'\"\r\n        (click)=\"evalEvent(field.component.click, $event)\"\r\n        (ionBlur)=\"evalEvent(control?.ionBlur, $event)\"\r\n        (ionFocus)=\"evalEvent(control?.ionFocus, $event)\"\r\n      >\r\n        <ion-icon  *ngIf=\"showIcon\"\r\n          [name]=\"iconName\" [src]=\"iconSrc\" [slot]=\"iconSlot\"\r\n          [ngClass]=\"evalExpr(icon?.ngClass)\"\r\n          [class]=\"icon?.class\"\r\n          [ngStyle]=\"evalExpr(icon?.ngStyle)\"\r\n          [style]=\"icon?.style\"\r\n          [color]=\"evalOrExpr(icon?.color)\"\r\n          [ios]=\"evalOrExpr(icon?.ios)\"\r\n          [md]=\"evalOrExpr(icon?.md)\"\r\n          [mode]=\"icon?.mode\"\r\n          [size]=\"icon?.size\"\r\n        ></ion-icon>\r\n        {{labelText}}\r\n      </ion-button>\r\n    </ng-container>\r\n  `,\r\n  standalone: false,\r\n})\r\nexport class ButtonComponent extends DynamicFieldComponent {\r\n\r\n  declare field: FieldType;\r\n\r\n  constructor(protected override injector: Injector) { super(injector); }\r\n\r\n  get control(): ButtonControlType {\r\n    return (this.field.component as ButtonComponentType).button as ButtonControlType;\r\n  }\r\n}\r\n"]}