{"version":3,"file":"dynamic-field.directive.js","sourceRoot":"","sources":["dynamic-field.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentRef, Directive, Input, OnChanges, OnInit, Type, ViewContainerRef } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\nimport { evalExpr } from '../core/util';\r\n\r\nimport { FieldType } from './types';\r\nimport { DynamicFieldComponent } from './dynamic-field.component';\r\nimport { ButtonComponent } from '../components/fields/button.component';\r\nimport { CheckboxComponent } from '../components/fields/checkbox.component';\r\nimport { DatetimeComponent } from '../components/fields/datetime.component';\r\nimport { InputComponent } from '../components/fields/input.component';\r\nimport { ToggleComponent } from '../components/fields/toggle.component';\r\n\r\n\r\nexport const SupportedDynamicComponents: {[type: string]: Type<DynamicFieldComponent>} = {\r\n  button: ButtonComponent,\r\n  checkbox: CheckboxComponent,\r\n  datetime: DatetimeComponent,\r\n  input: InputComponent,\r\n  toggle: ToggleComponent,\r\n};\r\n\r\n@Directive({\r\n  // tslint:disable-next-line: directive-selector\r\n  selector: '[dynamicField]',\r\n  standalone: false,\r\n})\r\nexport class DynamicFieldDirective implements OnChanges, OnInit {\r\n\r\n  @Input() field: FieldType;\r\n  @Input() frm: FormGroup;\r\n  @Input() host: any;\r\n\r\n  component: ComponentRef<DynamicFieldComponent>;\r\n\r\n  constructor(\r\n    private container: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    if (this.component) {\r\n      this.component.instance.field = this.field;\r\n      this.component.instance.frm = this.frm;\r\n      this.component.instance.host = this.host;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\n    if (!SupportedDynamicComponents[this.field.component.type]) {\n      // console.log({ field: this.field, frm: this.frm });\n      const supportedTypes = Object.keys(SupportedDynamicComponents).join(', ');\n      throw new Error(\n        `This dynamic component type is not implemented: (${this.field.component.type}).\n        Supported components: ${supportedTypes}`\n      );\n    }\n    this.component = this.container.createComponent<DynamicFieldComponent>(SupportedDynamicComponents[this.field.component.type]);\r\n    this.component.instance.field = this.field;\r\n    this.component.instance.frm = this.frm;\r\n    this.component.instance.host = this.host;\r\n\r\n    if (this.field.component.type !== 'button') {\r\n      if (!this.frm.controls[this.field.name]) {\r\n        // console.log(this.constructor.name + '.ngOnInit() -> Create control', { field: this.field, frm: this.frm });\r\n        const control = new FormControl(this.field.value.hasOwnProperty('default') ? (this.field.value as any).default : null);\r\n        if (this.field.component.validators) { control.setValidators(this.evalExpr(this.field.component.validators, { Validators })); }\r\n        this.frm.addControl(this.field.name, control);\r\n      } else {\r\n        // console.log(this.constructor.name + '.ngOnInit() -> Perfecto, el control ya existe !!!!!!', { field: this.field, frm: this.frm });\r\n      }\r\n    }\r\n  }\r\n\r\n  // ---------------------------------------------------------------------------------------------------\r\n  //  evalExpr\r\n  // ---------------------------------------------------------------------------------------------------\r\n\r\n  evalExpr(expr: string, args?: { [key: string]: any }): any {\r\n    // Evaluamos el código de la expresión.\r\n    return evalExpr(expr, { args, host: this.host });\r\n  }\r\n\r\n}\r\n\r\n"]}