{"version":3,"file":"dynamic-field.component.js","sourceRoot":"","sources":["dynamic-field.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { UpperCasePipe, LowerCasePipe, TitleCasePipe } from '@angular/common';\r\n\r\nimport { FieldType, IconControlType, LabelControlType } from './types';\r\nimport { DynamicAbstractComponent } from './dynamic-abstract.component';\r\n\r\n\r\n/**\n * Base component from which all field components inherit.\n */\nexport abstract class DynamicFieldComponent extends DynamicAbstractComponent {\n\r\n  field: FieldType;\r\n  declare frm: FormGroup;\r\n  declare host: any;\r\n\r\n  constructor(protected override injector: Injector) { super(injector); }\r\n\r\n\r\n  // ---------------------------------------------------------------------------------------------------\r\n  //  label\r\n  // ---------------------------------------------------------------------------------------------------\r\n\r\n  get label(): LabelControlType {\r\n    return this.field.component.label as LabelControlType;\r\n  }\r\n\r\n  get labelText(): string {\r\n    let text: string =  typeof this.label === 'string' ? this.label : this.evalOrExpr(this.label.text) as string;\r\n    if (this.label.pipes && this.label.pipes.length) {\r\n      this.label.pipes.map(pipe => {\r\n        switch (pipe) {\r\n          case 'lowercase': text = (new LowerCasePipe()).transform(text); break;\r\n          case 'uppercase': text = (new UpperCasePipe()).transform(text); break;\r\n          case 'titlecase': text = (new TitleCasePipe()).transform(text); break;\r\n          case 'translate': text = this.translate.instant(text); break;\r\n        }\r\n      });\r\n    } else {\r\n      text = this.translate.instant(text);\r\n    }\r\n    return text;\r\n  }\r\n\r\n\r\n  // ---------------------------------------------------------------------------------------------------\r\n  //  icon\r\n  // ---------------------------------------------------------------------------------------------------\r\n\r\n  get icon(): IconControlType {\r\n    return typeof this.field.component.icon === 'object' ? this.field.component.icon as IconControlType : undefined;\r\n  }\r\n\r\n  get showIcon(): boolean {\r\n    return !!this.field.component.icon;\r\n  }\r\n\r\n  get iconName(): string | undefined {\r\n    const icon: any = this.field.component.icon;\r\n    return typeof icon === 'string' && !icon.includes('assets') ? icon : this.evalOrExpr(icon.name) as string || undefined;\r\n  }\r\n\r\n  get iconSrc(): string | undefined {\r\n    const icon: any = this.field.component.icon;\r\n    return typeof icon === 'string' && icon.includes('assets') ? icon : this.evalOrExpr(icon.src) as string || undefined;\r\n  }\r\n\r\n  get iconSlot(): 'start' | 'end' | undefined {\r\n    const icon: any = this.field.component.icon;\r\n    return icon === undefined || icon.slot === undefined ? 'start' : icon.slot;\r\n  }\r\n\r\n\r\n  // ---------------------------------------------------------------------------------------------------\r\n  //  errors\n  // ---------------------------------------------------------------------------------------------------\n\n  /**\n   * Determines whether an error message should be shown to the user.\n   *\n   * ```html\n   * <p *ngIf=\"initialized && (!isNew || isNew && (getter('descripcion').touched || getter('descripcion').dirty)) && getter('descripcion').errors?.required\">{{'misdirecciones.descripcion_required' | translate}}</p>\n   * ```\n   *\r\n   * ```html\r\n   * <p *ngIf=\"(getter('email').touched || getter('email').dirty) && getter('email').errors?.required\">{{'login.email_required' | translate}}</p>\r\n   * ```\r\n   */\r\n  hasError(err: any): boolean {\n    // If no behavior has been defined, use a sensible default.\n    if (!err.behavior) { err.behavior = ['touched', 'dirty']; }\n    // console.log('hasError => ', { field: this.field.name,\r\n    //   1: (!this.host.hasOwnProperty('initialized') || !!this.host.initialized),\r\n    //   2: (\r\n    //     !err.behavior.includes('isNew') && this.evalBehavior(err.behavior) ||\r\n    //     (!this.host.isNew || !!this.host.isNew && this.evalBehavior(err.behavior))\r\n    //   ),\r\n    //   3: !!this.frmControl.errors && !!this.frmControl.errors[err.validator],\r\n    //   err, formControl: this.frmControl, initialized: this.host.initialized, isNew: !!this.host.isNew\r\n    // });\r\n    return (\n      // Ensure the form has been initialized\n      (!this.host.hasOwnProperty('initialized') || !!this.host.initialized)\n      // Check the declared behavior.\n      && (\n        !err.behavior.includes('isNew') && this.evalBehavior(err.behavior) ||\n        (!this.host.isNew || !!this.host.isNew && this.evalBehavior(err.behavior))\n      )\n      // Ensure the control contains the specific error.\n      && !!this.frmControl.errors && !!this.frmControl.errors[err.validator]\n      // // Optionally check there is a message to show.\n      // && !!this.evalOrExpr(err.text) as any\n    );\n  }\n\r\n  evalBehavior(behavior): boolean {\r\n    return (\r\n      !behavior.includes('touched') || !!this.frmControl.touched ||\r\n      !behavior.includes('dirty') || !!this.frmControl.dirty\r\n    );\r\n  }\r\n\r\n  get frmControl(): FormControl {\r\n    return this.frm.controls[this.field.name] as FormControl;\r\n  }\r\n\r\n\r\n}\r\n"]}