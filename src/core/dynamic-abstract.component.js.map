{"version":3,"file":"dynamic-abstract.component.js","sourceRoot":"","sources":["dynamic-abstract.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector, Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { evalExpr } from '../core/util';\r\n\r\nimport { FieldType, stringOrExpr, booleanOrExpr, numberOrExpr, isExprLiteral } from './types';\n\r\n\r\n/**\n * Base component from which all dynamic components inherit.\n */\nexport abstract class DynamicAbstractComponent  {\n\r\n  frm: FormGroup;\r\n  host: any;\r\n\r\n  /**\n   * Instance of the translation service, the internationalization\n   * library (i18n) for Angular from the `@ngx-translate` package.\n   *\n   * @category Dependencies\n   */\n  translate: TranslateService;\n\r\n  constructor(protected injector: Injector) {\r\n    /** @category Dependencies */\r\n    this.translate = this.injector.get<TranslateService>(TranslateService);\r\n  }\r\n\r\n\r\n  // ---------------------------------------------------------------------------------------------------\r\n  //  size\r\n  // ---------------------------------------------------------------------------------------------------\r\n\r\n  size(field: FieldType, breakpoint?: string): number | undefined {\r\n    if (!field.component.size) { return undefined; }\r\n    breakpoint = breakpoint || 'xs';\r\n    return typeof field.component.size === 'object' ? field.component.size[breakpoint] : +field.component.size || undefined;\r\n  }\r\n\r\n\r\n  // ---------------------------------------------------------------------------------------------------\n  //  visible . disabled\n  // ---------------------------------------------------------------------------------------------------\n\n  visible(expr: boolean | string, $event?: any): boolean {\n    // Visible by default when no expression is provided.\n    if (!expr) { return true; }\n    // Evaluate the provided expression.\n    return typeof expr === 'boolean' ? expr : !!this.evalExpr(expr, { $event });\n  }\n\n  disabled(expr: boolean | string, $event?: any): boolean {\n    // Enabled by default when no expression is provided.\n    if (!expr) { return false; }\n    // Evaluate the provided expression.\n    return typeof expr === 'boolean' ? expr : !!this.evalExpr(expr, { $event });\n  }\n\r\n\r\n  // ---------------------------------------------------------------------------------------------------\r\n  //  eval\n  // ---------------------------------------------------------------------------------------------------\n\n  evalEvent(expr: string, $event: any): any {\n    // Evaluate the expression code.\n    return this.evalExpr(expr, { $event });\n  }\n\r\n  evalOrExpr(value: stringOrExpr | booleanOrExpr | numberOrExpr): string | boolean | number | undefined {\r\n    if (!value) { return (value as any); }\r\n    return isExprLiteral(value) ? this.evalExpr(value.expr) : value;\r\n  }\r\n\r\n  evalOrExprAndTr(value: stringOrExpr | booleanOrExpr | numberOrExpr, defaultValue?: any): string | boolean | number | undefined {\r\n    if (value === undefined) { return defaultValue; }\r\n    value = isExprLiteral(value) ? this.evalExpr(value.expr) : value;\r\n    if (!value) { return defaultValue; }\r\n    return this.translate.instant(value as string);\r\n  }\r\n\r\n  evalExpr(expr: string, args?: { [key: string]: any }): any { return evalExpr(expr, { args, host: this.host }); }\r\n\r\n}\r\n"]}